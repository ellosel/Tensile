

def foo(mydict):
    keys = []
    for k,v in mydict.items():
        if isinstance(k, dict):
            foo(k)
        if isinstance(v, dict):
            print("recurse")
            foo(v)
        if k.isdigit():
            mydict[int(k)] = mydict.pop(k)

testdict = {'1LDSBuffer': 0, 'AggressivePerfMode': 1, 'AssertFree0ElementMultiple': 1, 'AssertFree1ElementMultiple': 1, 'AssertMinApproxSize': 3, 'AssertSizeEqual': {}, 'AssertStrideAEqual': {'0': 1}, 'AssertStrideBEqual': {'0': 1}, 'AssertStrideCEqual': {'0': 1}, 'AssertStrideDEqual': {'0': 1}, 'AssertSummationElementMultiple': 1, 'AssignedDerivedParameters': False, 'AssignedProblemIndependentDerivedParameters': True, 'BufferLoad': True, 'BufferStore': True, 'CheckDimOverflow': 0, 'CheckTensorDimAsserts': False, 'CodeObjectVersion': 'default', 'DepthU': 8, 'DirectToLds': False, 'DirectToLdsA': False, 'DirectToLdsB': False, 'DisableAtomicFail': 0, 'DisableKernelPieces': 0, 'DisableVgprOverlapping': False, 'EdgeType': 'ShiftPtr', 'EnableMatrixInstruction': True, 'ExpandPointerSwap': 1, 'FractionalLoad': 0, 'GlobalLoadVectorWidthA': 2, 'GlobalLoadVectorWidthB': 2, 'GlobalRead2A': True, 'GlobalRead2B': True, 'GlobalReadCoalesceGroupA': True, 'GlobalReadCoalesceGroupB': True, 'GlobalReadCoalesceVectorA': True, 'GlobalReadCoalesceVectorB': True, 'GlobalReadVectorWidth': 2, 'GlobalSplitU': 1, 'GlobalSplitUSummationAssignmentRoundRobin': True, 'GlobalSplitUWorkGroupMappingRoundRobin': False, 'GlobalWriteVectorWidth': 2, 'GuaranteeNoPartialA': False, 'GuaranteeNoPartialB': False, 'ISA': [9, 0, 10], 'InnerUnroll': 2, 'InterleaveAlpha': 0, 'KernelLanguage': 'Assembly', 'LSCA': 64, 'LSCB': 64, 'LSPA': 2, 'LSPB': 2, 'LVCA': 32, 'LVCB': 32, 'LVPA': 1, 'LVPB': 1, 'LdcEqualsLdd': True, 'LdsBlockSizePerPad': 0, 'LdsBlockSizePerPadA': 0, 'LdsBlockSizePerPadB': 0, 'LdsNumElements': 2048, 'LdsNumElementsAlignedA': 512, 'LdsNumElementsAlignedB': 512, 'LdsOffsetA': 0, 'LdsOffsetA_Blk': 1024, 'LdsOffsetB': 512, 'LdsOffsetB_Blk': 1536, 'LdsPadA': 0, 'LdsPadB': 0, 'LocalDotLayout': 1, 'LocalRead2A': True, 'LocalRead2B': True, 'LocalReadVectorWidth': 1, 'LocalSplitU': 1, 'LocalWrite2A': True, 'LocalWrite2B': True, 'LocalWriteUseSgprA': False, 'LocalWriteUseSgprB': False, 'LoopDoWhile': False, 'LoopIters': 1, 'LoopTail': True, 'LoopUnroll': 4, 'MIBlock': [16, 16, 4, 1, 1, 1], 'MIOutputVectorWidth': 4, 'MIWaveGroup': [4, 1], 'MIWaveTile': [1, 4], 'MacroTile0': 64, 'MacroTile1': 64, 'MacroTileA': 64, 'MacroTileB': 64, 'MacroTileShapeMax': 64, 'MacroTileShapeMin': 1, 'MagicDivAlg': 2, 'MatrixInstB': 1, 'MatrixInstBM': 1, 'MatrixInstBN': 1, 'MatrixInstK': 4, 'MatrixInstM': 16, 'MatrixInstN': 16, 'MatrixInstruction': [16, 16, 4, 1], 'MaxOccupancy': 40, 'MaxVgprNumber': 256, 'MinVgprNumber': 0, 'NonTemporalA': 0, 'NonTemporalB': 0, 'NonTemporalC': 0, 'NumElementsPerThread': 16, 'NumGlobalWriteVectorsPerThread': 8, 'NumLoadsA': 1, 'NumLoadsB': 1, 'NumLoadsCoalescedA': 1, 'NumLoadsCoalescedB': 1, 'NumLoadsPerpendicularA': 1, 'NumLoadsPerpendicularB': 1, 'NumThreads': 256, 'OptNoLoadLoop': 1, 'PackBatchDims': 0, 'PackFreeDims': 1, 'PackGranularity': 2, 'PackSummationDims': 0, 'PackedC0IdxChars': ['I'], 'PackedC0IndicesX': [0], 'PackedC1IdxChars': ['J'], 'PackedC1IndicesX': [1], 'PerformanceSyncLocation': -1, 'PerformanceWaitCount': -1, 'PerformanceWaitLocation': -1, 'PersistentKernel': 0, 'PrefetchAcrossPersistent': 0, 'PrefetchGlobalRead': True, 'PrefetchLocalRead': 1, 'ProblemType': {'AllowNoFreeDims': False, 'AssignedDerivedParameters': True, 'Batched': True, 'ComplexConjugateA': False, 'ComplexConjugateB': True, 'ComputeDataType': 2, 'ConvolutionConfig': [], 'DataType': 2, 'DestDataType': 2, 'HighPrecisionAccumulate': False, 'Index0': 0, 'Index01A': 0, 'Index01B': 1, 'Index1': 1, 'IndexAssignmentsA': [0, 3, 2], 'IndexAssignmentsB': [1, 3, 2], 'IndexAssignmentsLD': [4, 5, 6, 7], 'IndexUnroll': 3, 'IndexUnrollA': 1, 'IndexUnrollB': 1, 'IndicesBatch': [2], 'IndicesFree': [0, 1], 'IndicesSummation': [3], 'NumIndicesBatch': 1, 'NumIndicesC': 3, 'NumIndicesFree': 2, 'NumIndicesLD': 4, 'NumIndicesSummation': 1, 'OperationType': 'GEMM', 'SetConstStrideA': [], 'SetConstStrideB': [], 'SilentHighPrecisionAccumulate': False, 'TLUA': True, 'TLUB': True, 'Tensor0': 0, 'Tensor1': 1, 'TileA': 0, 'TileAwareSelection': False, 'TileB': 1, 'TotalIndices': 4, 'TransposeA': False, 'TransposeB': True, 'UseBeta': True, 'UseInitialStridesAB': False, 'UseInitialStridesCD': False, 'ZeroPadA': [], 'ZeroPadB': []}, 'ReplacementKernel': False, 'ScheduleGlobalRead': 1, 'ScheduleIterAlg': 2, 'ScheduleLocalWrite': 1, 'SolutionIndex': 0, 'SolutionNameMin': 'Cijk_Ailk_BjlkC_CB_MT64x64x8_MI16x16x4x1_SE_1LDSB0_IU2_SIA2_SRVW2', 'StaggerU': 32, 'StaggerUMapping': 0, 'StaggerUStride': 256, 'StoreRemapVectorWidth': 2, 'StoreVectorWidth': 2, 'SubGroup0': 16, 'SubGroup1': 16, 'SubGroupA': 16, 'SubGroupB': 16, 'SuppressNoLoadLoop': False, 'ThreadTile': [1, 64], 'ThreadTile0': 4, 'ThreadTile1': 4, 'ThreadTileA': 4, 'ThreadTileB': 4, 'TransposeLDS': 0, 'UnrollIncIsDepthU': 0, 'UnrollMajorLDSA': 0, 'UnrollMajorLDSB': 0, 'UnrollMemFence': False, 'Use64bShadowLimit': 1, 'UseInstOffsetForGRO': 0, 'UseSgprForGRO': -1, 'Valid': False, 'VectorAtomicWidth': 1, 'VectorStore': -1, 'VectorWidth': 2, 'WaveSeparateGlobalReadA': 1, 'WaveSeparateGlobalReadB': 1, 'WorkGroup': [64, 4, 1], 'WorkGroupMapping': 8, 'WorkGroupMappingType': 'B', '_UseSgprForGRO': False, '_VectorStore': 1, '_staggerStrideShift': 2}
foo(testdict)